.review .relative_measurements {
  /*
  1, Content on a website can be sized relative to other elements on the page using relative measurements.
  2, The unit of em sizes font relative to the font size of a parent element.
  3, The unit of rem sizes font relative to the font size of a root element. That root element is the <html> element.
  4, Percentages are commonly used to size box-model features, like the width, height, borders, padding, or margin of an element.
  5, When percentages are used to size width and height, child elements will be sized relative to the dimensions of their parent (remember that parent dimensions must first be set).
  6, Percentages can be used to set padding and margin. Horizontal and vertical padding and margin are set relative to the width of a parent element.
  7, The minimum and maximum width of elements can be set using min-width and max-width.
  8, The minimum and maximum height of elements can be set using min-height and max-height.
  9, When the height of an image or video is set, then its width can be set to auto so that the media scales proportionally. Reversing these two properties and values will also achieve the same result.
  10,A background image of an HTML element will scale proportionally when its background-size property is set to cover.
  */
}

.review .media_queries {
/*
  1, When a website responds to the size of the screen it's viewed on, it’s called a responsive website.
  2, You can write media queries to help with different screen sizes.
  3, Media queries require media features. Media features are the conditions that must be met to render the CSS within a media query.
  4, Media features can detect many aspects of a user's browser, including the screen's width, height, resolution, orientation, and more.
  5, The and operator requires multiple media features to be true at once.
  6, A comma separated list of media features only requires one media feature to be true for the code within to be applied.
  7, The best practice for identifying where media queries should be set is by resizing the browser to determine where the content naturally breaks. Natural breakpoints are found by resizing the browser.
*/
}

/*
  Rem stands for root em.
  It acts similar to em, but instead of checking parent elements to size font, it checks the root element.
  The root element is the <html> tag.
*/
html {
  font-size: 20px;
}

h1 {
  font-size: 2rem;
}

/* Percentages: Height & Width
  To size non-text HTML elements relative to their parent elements on the page you can use percentages.

  Percentages are often used to size box-model values, like width and height, padding, border, and margins.
  They can also be used to set positioning properties (top, bottom, left, right).

  To start, let's size the height and width of an element using percentages.

  In the example above, .main and .subsection each represent divs. The .subsection div is nested within the .main div.
  Note that the dimensions of the parent div (.main) have been set to a height of 300 pixels and a width of 500 pixels.

  When percentages are used, elements are sized relative to the dimensions of their parent element (also known as a container).
  Therefore, the dimensions of the .subsection div will be 150 pixels tall and 250 pixels wide.
  Be careful, a child element's dimensions may be set erroneously if the dimensions of its parent element aren't set first.

  Note: Because the box model includes padding, borders, and margins, setting an element's width to
  100% may cause content to overflow its parent container. While tempting, 100% should only be used when content will not have padding, border, or margin.
*/
.main {
height: 300px;
width: 500px;
}

.main .subsection {
height: 50%;
width: 50%;
}

/* Percentages: Padding & Margin
  Percentages can also be used to set the padding and margin of elements.

  When height and width are set using percentages, you learned that the dimensions of child elements
  are calculated based on the dimensions of the parent element.

  When percentages are used to set padding and margin, however,
  they are calculated based only on the width of the parent element.

  For example, when a property like margin-left is set using a percentage (say 50%), the element will
  be moved halfway to the right in the parent container (as opposed to the child element receiving a margin half of its parent's margin).

  Vertical padding and margin are also calculated based on the width of the parent. Why? Consider the following scenario:

  A container div is defined, but its height is not set (meaning it's flat).
  The container then has a child element added within. The child element does have a set height.
  This causes the height of its parent container to stretch to that height.
  The child element requires a change, and its height is modified.
  This causes the parent container's height to also stretch to the new height.
  This cycle occurs endlessly whenever the child element's height is changed!
  In the scenario above, an unset height (the parent's) results in a constantly changing height
  due to changes to the child element. This is why vertical padding and margin are based on the width of the parent, and not the height.

  Note: When using relative sizing, ems and rems should be used to size text and dimensions on the
  page related to text size (i.e. padding around text). This creates a consistent layout based on text size.
  Otherwise, percentages should be used.
*/
#banner {
  height: 46rem;
  background-image: url('camel-background.png');
  background-position: center;
  background-size: cover;
  background-repeat: no-repeat;
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
}

#blog .post {
  width: 52%;
  margin-top: 12.5%;
	margin-bottom: 7.5%;
  display: flex;
  flex-direction: column;
  align-items: center;
  font-family: 'Merriweather', serif;
  font-weight: 300;
  font-size: 1rem;
  text-align: center;
  line-height: 1.8;
  color: #444444;
}

/* Width: Minimum & Maximum
  Although relative measurements provide consistent layouts across devices of different screen sizes,
  elements on a website can lose their integrity when they become too small or large.
  You can limit how wide an element becomes with the following properties:

  min-width — ensures a minimum width for an element.
  max-width — ensures a maximum width for an element.
  p {
    min-width: 300px;
    max-width: 600px;
  }
  In the example above, when the browser is resized, the width of paragraph elements will not fall below 300 pixels,
  nor will their width exceed 600 pixels.

  When a browser window is narrowed or widened, text can become either very compressed or very
  spread out, making it difficult to read. These two properties ensure that content is legible by limiting the minimum and maximum widths.

  Note: The unit of pixels is used to ensure hard limits on the dimensions of the element(s).
*/

/* Height: Minimum & Maximum
  You can also limit the minimum and maximum height of an element.

  min-height — ensures a minimum height for an element's box.
  max-height — ensures a maximum height for an element's box.
  p {
    min-height: 150px;
    max-height: 300px;
  }
  In the example above, the height of all paragraphs will not shrink below 150 pixels and the height will not exceed 300 pixels.

  What will happen to the contents of an element if the max-height property is set too low for that element?
  It's possible that content will overflow outside of the element, resulting in content that is not legible.
*/

/* Scaling Images and Videos
  Many websites contain a variety of different media, like images and videos. When a website contains such media,
  it's important to make sure that it is scaled proportionally so that users can correctly view it.

  .container {
    width: 50%;
    height: 200px;
    overflow: hidden;
  }

  .container img {
    max-width: 100%;
    height: auto;
    display: block;
  }
  In the example above, .container represents a container div.
  It is set to a width of 50% (half of the browser's width, in this example) and a height of 200 pixels.
  Setting overflow to hidden ensures that any content with dimensions larger than the container will be hidden from view.

  The second CSS rule ensures that images scale with the width of the container.
  The height property is set to auto, meaning an image's height will automatically scale proportionally with the width.
  Finally, the last line will display images as block level elements (rather than inline-block, their default state).
  This will prevent images from attempting to align with other content on the page (like text), which can add unintended margin to the images.

  It's worth memorizing the entire example above. It represents a very common design pattern used to scale images and videos proportionally.

  Note: The example above scales the width of an image (or video) to the width of a container.
  If the image is larger than the container, the vertical portion of the image will overflow and will not display.
  To swap this behavior, you can set max-height to 100% and width to auto (essentially swapping the values).
  This will scale the height of the image with the height of the container instead.
  If the image is larger than the container, the horizontal portion of the image will overflow and not display.
*/

/* Scaling Background Images
  Background images of HTML elements can also be scaled responsively using CSS properties.

  body {
    background-image: url('#');
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
  }
  In the example above, the first CSS declaration sets the background image (# is a placeholder for an image URL in this example).
  The second declaration instructs the CSS compiler to not repeat the image (by default, images will repeat).
  The third declaration centers the image within the element.

  The final declaration, however, is the focus of the example above. It's what scales the background image.
  The image will cover the entire background of the element, all while keeping the image in proportion.
  If the dimensions of the image exceed the dimensions of the container then only a portion of the image will display.
*/


@media only screen and (max-width: 480px) {
  body {
    font-size: 12px;
  }
}
/* Media Queries
  CSS uses media queries to adapt a website's content to different screen sizes.
  With media queries, CSS can detect the size of the current screen and apply different CSS styles depending on the width of the screen.

  The example above demonstrates how a media query is applied.
  The media query defines a rule for screens smaller than 480 pixels (approximately the width of many smartphones in landscape orientation).

  Let’s break this example down into its parts:

  @media — This keyword begins a media query rule and instructs the CSS compiler on how to parse the rest of the rule.
  only screen — Indicates what types of devices should use this rule.
  In early attempts to target different devices, CSS incorporated different media types (screen, print, handheld).
  The rationale was that by knowing the media type, the proper CSS rules could be applied.
  However, “handheld” and “screen” devices began to occupy a much wider range of sizes and having only
  one CSS rule per media device was not sufficient. screen is the media type always used for displaying content,
  no matter the type of device. The only keyword is added to indicate that this rule only applies to one media type (screen).
  and (max-width : 480px) — This part of the rule is called a media feature, and instructs the
  CSS compiler to apply the CSS styles to devices with a width of 480 pixels or smaller.
  Media features are the conditions that must be met in order to render the CSS within a media query.
  CSS rules are nested inside of the media query's curly braces.
  The rules will be applied when the media query is met.
  In the example above, the text in the body element is set to a font-size of 12px when the user's screen is less than 480px.
*/

@media only screen and (min-width: 320px) and (max-width: 480px) {
}
@media only screen and (min-width: 320px) {
}
@media only screen and (min-width: 480px) {
}
/*Range
  Specific screen sizes can be targeted by setting multiple width and height media features.
  min-width and min-height are used to set the minimum width and minimum height, respectively.
  Conversely, max-width and max-height set the maximum width and maximum height, respectively.

  By using multiple widths and heights, a range can be set for a media query.

  The example above would apply its CSS rules only when the screen size is between 320 pixels and 480 pixels.
  Notice the use of a second and keyword after the min-width media feature. This allows us to chain two requirements together.

  The example above can be written using two separate rules as well:

  The first media query in the example above will apply CSS rules when the size of the screen meets or exceeds 320 pixels.
  The second media query will apply CSS rules when the size of the screen meets or exceeds 480 pixels,
  meaning that it will override the CSS rules present in the first media query.

  Both examples above are valid, and it is likely that you will see both patterns used when reading another developer's code.
*/

@media only screen and (min-resolution: 300dpi) {
}
/* Dots Per Inch (DPI)
  Another media feature we can target is screen resolution.
  Many times we will want to supply higher quality media (images, video, etc.) only to users with screens
  that can support high resolution media. Targeting screen resolution also helps users avoid downloading
  high resolution (large file size) images that their screen may not be able to properly display.

  To target by resolution, we can use the min-resolution and max-resolution media features.
  These media features accept a resolution value in either dots per inch (dpi) or dots per centimeter (dpc).

  The media query in the example above targets high resolution screens by making sure the screen
  resolution is at least 300 dots per inch. If the screen resolution query is met,
  then we can use CSS to display high resolution images and other media.
*/

@media only screen and (max-width: 480px) and (min-resolution: 300dpi) {
}
/* And Operator
  In previous exercises, we chained multiple media features of the same type in one media query by using the and operator.
  It allowed us to create a range by using min-width and max-width in the same media query.

  The and operator can be used to require multiple media features.
  Therefore, we can use the and operator to require both a max-width of 480px and to have a min-resolution of 300dpi.

  By placing the and operator between the two media features, the browser will require both media features
  to be true before it renders the CSS within the media query. The and operator can be used to chain as many media features as necessary.
*/

@media only screen and (min-width: 480px), (orientation: landscape) {
}
/* Comma Separated List
  If only one of multiple media features in a media query must be met, media features can be separated in a comma separated list.

  For example, if we needed to apply a style when only one of the below is true:

  The screen is more than 480 pixels wide
  The screen is in landscape mode
  We could write:

  In the example above, we used a comma (,) to separate multiple rules.
  The example above requires only one of the media features to be true for its CSS to apply.

  Note that the second media feature is orientation. The orientation media feature detects if
  the page has more width than height. If a page is wider, it's considered landscape, and if a page is taller, it's considered portrait.
*/

@media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {
}
/* Breakpoints
  We know how to use media queries to apply CSS rules based on screen size and resolution,
  but how do we determine what queries to set?

  The points at which media queries are set are called breakpoints.
  Breakpoints are the screen sizes at which your web page does not appear properly.
  For example, if we want to target tablets that are in landscape orientation, we can create the following breakpoint:

  The example above creates a screen size range the size of a tablet in landscape mode and also identifies the orientation.

  However, setting breakpoints for every device imaginable would be incredibly difficult because there
  are many devices of differing shapes and sizes.
  In addition, new devices are released with new screen sizes every year.

  Rather than set breakpoints based on specific devices, the best practice is to resize your
  browser to view where the website naturally breaks based on its content.
  The dimensions at which the layout breaks or looks odd become your media query breakpoints.
  Within those breakpoints, we can adjust the CSS to make the page resize and reorganize.

  By observing the dimensions at which a website naturally breaks, you can set media query breakpoints that
  create the best possible user experience on a project by project basis, rather than forcing every project
  to fit a certain screen size. Different projects have different needs, and creating a responsive design should be no different.
*/
